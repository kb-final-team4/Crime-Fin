<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="sql.crime-fin.mapper">
    <!-- member Result map
    SQL> desc member;
     이름                                      널?      유형

     MEMBER_ID                                 NOT NULL VARCHAR2(20)
     EMAIL                                     NOT NULL VARCHAR2(40)
     PASSWORD                                  NOT NULL VARCHAR2(20)
     NAME                                      NOT NULL VARCHAR2(20)
     PHONE                                     NOT NULL VARCHAR2(20)
     ADDRESS                                            VARCHAR2(50)
     SEX                                                NUMBER
     REGDATE                                            DATE
     MESSAGE_OK                                         NUMBER
    -->
    <resultMap id="memberResultMap" type="memberVO">
        <id column="member_id" property="memberId"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <result column="name" property="name"/>
        <result column="phone" property="phone"/>
        <result column="address" property="address"/>
        <result column="sex" property="sex"/>
        <result column="regdate" property="regDate"/>
        <result column="message_ok" property="messageOk"/>
    </resultMap>
    <!-- 로그인 -->
    <select id="selectMember" parameterType="memberVO" resultType="member">
        SELECT
        member_id, password
        FROM member
        WHERE member_id = #{memberId}
            AND password = #{password}
    </select>

    <!-- 멤버 상세정보 업데이트 하기 (비밀번호 빼고)-->
    <update id="updateMember" parameterType="memberVO">
        UPDATE member
        SET email=#{email}, name=#{name}, phone=#{phone}, address=#{address}, sex=#{sex}
        WHERE member_id=#{memberId}
    </update>

    <!-- 멤버 비밀번호 업데이트할 때 입력받은 비밀번호 맞는지 보기 로그인 써도 될듯-->
    <!--<select id="selectMemberPassword" parameterType="MemberVO" resultType="String">
        SELECT password
        FROM member
        WHERE password LIKE #{password} AND id LIKE #{id}
    </select>-->

    <!-- 멤버 비밀번호 업데이트 하기-->
    <update id="updateMemberPassword" parameterType="memberVO">
        UPDATE member
        SET password=#{password}
        WHERE member_id=#{memberId}
    </update>

    <!-- 회원가입하기 -->
    <insert id="insertMember" parameterType="memberVO">
        INSERT INTO member(
            member_id,
            email,
            password,
            name,
            phone,
            address,
            sex,
            regdate,
            message_ok)
        VALUES
            (#{memberId}, #{email}, #{password}, #{name}, #{phone}, #{address}, #{sex}, #{regDate}, #{messageOK})
    </insert>

    <!--회원 탈퇴하기 -->
    <delete id="deleteMember" parameterType="memberVO">
        DELETE FROM member
        WHERE member_id LIKE #{memberId} AND password LIKE #{password}
    </delete>

        <!-- ////////////////////////// 링크 조회 관련  ///////////////////////////// -->
    <!-- phishingInfo resultMap -->
    <resultMap id="phishingInfoResultMap" type="phishingInfoVO">
    	<id column="phishing_id" property="phishingId"/>
        <result column="phishing_num" property="phishingNum"/>
        <result column="phishing_num_info" property="phishingNumInfo"/>
        <result column="phishing_link" property="phishingLink"/>
	</resultMap>	
    
    <!-- 앞 단계에서 번호조회를 한 유저의 피싱검색기록에서 기존 피싱 아이디 알아오기 -->
    <select id="findOldPhishingIdForLink" parameterType = "String" resultType = "String">
    	SELECT 
    	phishing_id 
    	FROM history 
    	WHERE member_id LIKE #{VALUE} 
    		AND history_date >= (SYSDATE - (INTERVAL '1' MINUTE))
    </select>
    
     <!-- 기존 피싱 아이디가 null이면 -->
    <!-- 1)	새 phishing_id, null, null, 현재 사용자가 입력한 피싱 링크를 phishinginfo에 저장함 -->
    <insert id="insertPhishingInfoWithLink" parameterType = "phishingInfoVO">
    	INSERT INTO 
    	phishinginfo 
    	VALUES(#{phishingId}, null, null, #{phishingLink})
    </insert>
    
    <!-- 필요할까봐 일단 넣음.. 근데 링크조회에서는 안 쓰는 듯 -->
    <!-- history resultMap -->
    <resultMap id="historyResultMap" type="historyVO">
    	<id column="history_id" property="historyId"/>
        <result column="member_id" property="memberId"/>
        <result column="history_date" property="historyDate"/>
        <result column="phishing_id" property="phishingId"/>
	</resultMap>
    
    <!-- 2)	새 History_id, 로그인된 member_id, sysdate, 새 phishing_id 를 history에 insert함  -->
    <insert id="insertHistoryWithLink" parameterType="historyVO">
    	INSERT INTO 
    	history 
    	VALUES(#{historyId}, #{memberId}, sysdate, #{phishingId})
    </insert>
    
    <!-- 기존 피싱 아이디가 null이 아니면 -->
    <!-- 현재 사용자가 입력한 피싱 링크를 
    	기존에 있는 phishinginfo에 뽑은 phishing_id로 접근해서 
    	phishing_link를 입력한 피싱 링크로 업데이트함 
    -->
    <update id="updatePhishingInfoWithLink" parameterType = "phishingInfoVO">
    	UPDATE 
    	phishinginfo 
    	SET phishing_link = #{phishingLink} 
    	WHERE phishing_id LIKE #{phishingId}
    </update>
</mapper>





























